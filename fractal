import matplotlib.pyplot as plt
import numpy as np

def snowflake(order, length=1.0):
    """
    Generate the vertices of a snowflake.

    :param order: The order of the Koch snowflake.
    :param length: The length of each side of the initial triangle.
    :return: Numpy array of (x, y) points representing the Koch snowflake.
    """
    # Define the initial equilateral triangle
    angle = np.pi / 3  # 60 degrees
    p1 = np.array([0, 0])
    p2 = np.array([length, 0])
    p3 = np.array([length / 2, length * np.sin(angle)])
    points = np.array([p1, p2, p3, p1])  # Close the triangle

    def koch_iteration(points):
        """
        Perform one iteration of the Koch rule on the given points.
        :param points: Array of (x, y) points.
        :return: New array of (x, y) points after applying the Koch rule.
        """
        new_points = []
        for i in range(len(points) - 1):
            p1 = points[i]
            p2 = points[i + 1]
            # Divide the segment into three equal parts
            pA = p1 + (p2 - p1) / 3
            pB = p1 + 2 * (p2 - p1) / 3
            # Create the peak of the new triangle
            dx, dy = pB - pA
            pC = pA + np.array([-dy, dx]) * (np.sqrt(3) / 2)
            # Append the new points
            new_points.extend([p1, pA, pC, pB])
        new_points.append(points[-1])  # Add the last point
        return np.array(new_points)

    # Apply the Koch iterations
    for _ in range(order):
        points = koch_iteration(points)

    return points

# Parameters for the snowflake
order = 2  # Fractal order
length = 1.0  # Length of the initial triangle's sides

# Generate the fractal
points = snowflake(order, length)

# Plot the Koch snowflake
plt.figure(figsize=(8, 8))
plt.plot(points[:, 0], points[:, 1], 'b-')
plt.axis('equal')
plt.title(f"Snowflake (Order {order})")
plt.show()

